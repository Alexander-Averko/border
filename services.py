# services.py
import aiohttp
import datetime
import pytz
import logging
from typing import Optional, Dict

from aiogram import Bot
from database import db
from config import config

logger = logging.getLogger(__name__)
TIMEZONE = pytz.timezone(config.timezone)

# ... (—Ñ—É–Ω–∫—Ü–∏—è format_car_info –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def format_car_info(
    user_car_data: Dict,
    total_cars: int,
    first_car_overall: Optional[Dict] = None,
    first_waiting_car: Optional[Dict] = None
) -> str:
    status_map = {1: "–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω", 2: "–ü—Ä–∏–±—ã–ª –≤ –ó–û", 3: "–í—ã–∑–≤–∞–Ω –≤ –ü–ü"}
    date_format = "%H:%M:%S %d.%m.%Y"
    
    info_text = f"üöó **–í—Å–µ–≥–æ –º–∞—à–∏–Ω –≤ –æ—á–µ—Ä–µ–¥–∏: {total_cars}**\n\n"

    user_status_text = status_map.get(user_car_data['status'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    user_reg_time = datetime.datetime.strptime(user_car_data['registration_date'], date_format).astimezone()
    
    info_text += (
        f"üöô **–í–∞—à –∞–≤—Ç–æ:** `{user_car_data['regnum']}`\n"
        f"üö¶ **–°—Ç–∞—Ç—É—Å:** *{user_status_text}*\n"
    )

    if user_car_data['status'] == 3:
        changed_time = datetime.datetime.strptime(user_car_data['changed_date'], date_format).astimezone()
        wait_time = changed_time - user_reg_time
        info_text += f"‚è± **–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (–¥–æ –≤—ã–∑–æ–≤–∞):** `{str(wait_time).split('.')[0]}`\n"
    else:
        current_time = datetime.datetime.now()
        wait_time = current_time - user_reg_time
        info_text += (
            f"üìç **–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:** `{user_car_data['order_id']}`\n"
            f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** `{user_reg_time.strftime(date_format)}`\n"
            f"‚è≥ **–í –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ:** `{str(wait_time).split('.')[0]}`\n"
        )

    if first_car_overall and first_car_overall.get('regnum') != user_car_data.get('regnum'):
        info_text += "\n---\n"
        reg_time = datetime.datetime.strptime(first_car_overall['registration_date'], date_format).astimezone()
        
        if first_car_overall['status'] == 3:
            title = "üîù –í—ã–∑–≤–∞–Ω –≤ –ü–ü"
            changed_time = datetime.datetime.strptime(first_car_overall['changed_date'], date_format).astimezone()
            wait_time_str = str(changed_time - reg_time).split('.')[0]
            
            info_text += (
                f"**{title}:** `{first_car_overall['regnum']}`\n"
                f"‚è± **–í—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏:** `{wait_time_str}`\n"
                f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** `{reg_time.strftime(date_format)}`\n"
                f"üîî **–í—ã–∑–≤–∞–Ω:** `{changed_time.strftime(date_format)}`\n"
            )
        else:
            title = "üîù –ü–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏"
            current_time = datetime.datetime.now()
            wait_time_str = str(current_time - reg_time).split('.')[0]
            
            info_text += (
                f"**{title}:** `{first_car_overall['regnum']}`\n"
                f"‚è≥ **–û–∂–∏–¥–∞–µ—Ç —É–∂–µ:** `{wait_time_str}`\n"
                f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** `{reg_time.strftime(date_format)}`\n"
            )

    if first_waiting_car and first_waiting_car.get('regnum') != user_car_data.get('regnum'):
        info_text += "---\n"
        reg_time = datetime.datetime.strptime(first_waiting_car['registration_date'], date_format).astimezone()
        current_time = datetime.datetime.now()
        wait_time_str = str(current_time - reg_time).split('.')[0]
        
        info_text += (
            f"üëë **–°–ª–µ–¥—É—é—â–∏–π –Ω–∞ –≤—ã–∑–æ–≤:** `{first_waiting_car['regnum']}`\n"
            f"‚è≥ **–û–∂–∏–¥–∞–µ—Ç —É–∂–µ:** `{wait_time_str}`\n"
            f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** `{reg_time.strftime(date_format)}`\n"
        )

    return info_text


async def fetch_queue_data() -> Optional[Dict]:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(config.api_url) as response:
                response.raise_for_status()
                return await response.json()
    except aiohttp.ClientError as e:
        logger.error(f"API request error: {e}")
        return None

async def check_and_notify_user(bot: Bot, user_id: int, car_number: str, is_initial_check: bool = False):
    api_data = await fetch_queue_data()
    if not api_data or "carLiveQueue" not in api_data:
        logger.warning("Could not fetch or parse API data.")
        return

    queue = api_data["carLiveQueue"]
    total_cars = len(queue)
    user_car = next((car for car in queue if car["regnum"] == car_number), None)
    
    if not user_car:
        if is_initial_check:
            await bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º `{car_number}` –≤ –æ—á–µ—Ä–µ–¥–∏.")
        await db.remove_car(car_number)
        await bot.send_message(user_id, f"‚ÑπÔ∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å `{car_number}` –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è (–ø—Ä–æ–ø–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏).")
        return

    first_car_overall = queue[0] if queue else None
    first_waiting_car = None
    if first_car_overall and first_car_overall.get('status') == 3:
        first_waiting_car = next((car for car in queue if car.get("status") != 3), None)

    current_pos = user_car.get("order_id")
    current_status = user_car["status"]

    if is_initial_check:
        message_text = format_car_info(user_car, total_cars, first_car_overall, first_waiting_car)
        await bot.send_message(user_id, message_text)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∏ —Å—Ç–∞—Ç—É—Å
        await db.update_car_state(car_number, current_pos, current_status)
        return

    last_state = await db.get_car_state(car_number)
    if not last_state: return

    notified_pos = last_state.get("notified_pos")
    last_status = last_state.get("last_status")
    
    notification_text = ""
    should_send_notification = False

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∑–æ–≤ –≤ –ü–ü (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if current_status == 3 and last_status != 3:
        message_on_call = format_car_info(user_car, total_cars)
        full_message = f"üö® **–í–ù–ò–ú–ê–ù–ò–ï! –í–´–ó–í–ê–ù –í –ü–ü!** üö®\n\n{message_on_call}"
        for _ in range(3):
            await bot.send_message(user_id, full_message)
        await db.remove_car(car_number)
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏
    if current_pos is not None and notified_pos is not None:
        pos_change = notified_pos - current_pos
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        threshold = 0
        if 100 < current_pos <= 500: threshold = 20
        elif 40 < current_pos <= 100: threshold = 15
        elif 20 <= current_pos <= 40: threshold = 10
        elif current_pos < 20: threshold = 3

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ø–æ—Ä–æ–≥
        if threshold > 0 and pos_change >= threshold:
            should_send_notification = True
            notification_text = f"üîî –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∞—Å—å! –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: **{current_pos}**."
        
        # –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–∞–∂–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –≤ 20
        if notified_pos > 20 and current_pos <= 20:
            should_send_notification = True
            notification_text = f"üîî –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∞—Å—å! –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: **{current_pos}**."

        # –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–∞–∂–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –≤ 50
        if notified_pos > 50 and current_pos <= 50:
            should_send_notification = True
            notification_text = f"üîî –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∞—Å—å! –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: **{current_pos}**."

        # –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–∞–∂–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏ –≤ 110
        if notified_pos > 110 and current_pos <= 110:
            should_send_notification = True
            notification_text = f"üîî –û—á–µ—Ä–µ–¥—å –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∞—Å—å! –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: **{current_pos}**."

    if should_send_notification:
        full_message = f"{notification_text}\n\n{format_car_info(user_car, total_cars, first_car_overall, first_waiting_car)}"
        await bot.send_message(user_id, full_message)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–∑–∏—Ü–∏—é, –∏ —Å—Ç–∞—Ç—É—Å
        await db.update_car_state(car_number, current_pos, current_status)
    else:
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Å—Ç–∞—Ç—É—Å
        if current_status != last_status:
            await db.update_car_status_only(car_number, current_status)


async def scheduled_job(bot: Bot):
    logger.info("Scheduler running a check...")
    all_tracked_cars = await db.get_all_tracked_cars()
    for user_id, car_number in all_tracked_cars:
        await check_and_notify_user(bot, user_id, car_number)