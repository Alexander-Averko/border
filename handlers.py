# handlers.py
import asyncio
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from database import db
from keyboards import get_main_menu_keyboard
from services import check_and_notify_user, fetch_queue_data, format_car_info
from config import config

router = Router()

class UserForm(StatesGroup):
    waiting_for_token = State()
    waiting_for_car_number = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

@router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if await db.is_user_authorized(message.from_user.id):
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.")
        await state.set_state(UserForm.waiting_for_token)


# üëá –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –î–ï–ö–û–†–ê–¢–û–†: —Ç–µ–ø–µ—Ä—å –∏—Ö –¥–≤–∞ –¥–ª—è –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
@router.message(F.text == "üöó –ú–æ–∏ –∞–≤—Ç–æ")
@router.message(Command("mycars"))
async def handle_my_cars(message: Message, bot: Bot):
    """
    –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é.
    """
    user_id = message.from_user.id
    if not await db.is_user_authorized(user_id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    cars = await db.get_user_cars(user_id)
    if not cars:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/add` –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.")
        return

    await message.answer("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∞–≤—Ç–æ...")
    api_data = await fetch_queue_data()
    if not api_data or "carLiveQueue" not in api_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    queue = api_data["carLiveQueue"]
    total_cars_in_queue = len(queue)
    found_any = False

    for car_number in cars:
        user_car_data = next((c for c in queue if c["regnum"] == car_number), None)
        
        if user_car_data:
            found_any = True
            first_car_overall = queue[0] if queue else None
            first_waiting_car = None
            if first_car_overall and first_car_overall.get('status') == 3:
                first_waiting_car = next((c for c in queue if c.get("status") != 3), None)
            
            info_text = format_car_info(user_car_data, total_cars_in_queue, first_car_overall, first_waiting_car)
            await message.answer(info_text)
        else:
            await message.answer(f"‚ÑπÔ∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å `{car_number}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –ø—Ä–æ–µ—Ö–∞–ª –≥—Ä–∞–Ω–∏—Ü—É. –£–¥–∞–ª—è—é –µ–≥–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
            await db.remove_car(car_number)
        
        await asyncio.sleep(0.5)

    if not found_any and cars:
        await message.answer("–ù–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –≤—Å–µ —É–∂–µ –ø—Ä–æ–µ—Ö–∞–ª–∏.")


# üëá –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –î–ï–ö–û–†–ê–¢–û–†
@router.message(F.text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ")
@router.message(Command("add"))
async def handle_add_command(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
    """
    if not await db.is_user_authorized(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return
        
    await state.set_state(UserForm.waiting_for_car_number)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1234AB7`).")


# üëá –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –î–ï–ö–û–†–ê–¢–û–†
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ")
@router.message(Command("delete"))
async def handle_delete_command(message: Message):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    if not await db.is_user_authorized(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    await db.delete_all_cars(message.from_user.id)
    await message.answer("‚úÖ –í—Å–µ –≤–∞—à–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---

@router.message(UserForm.waiting_for_token)
async def process_token(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
    """
    if message.text in config.valid_user_tokens:
        await db.authorize_user(message.from_user.id)
        await state.clear()
        await message.answer(
            "‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π.")


# ... (–≤–µ—Å—å –∫–æ–¥ –¥–æ process_car_number –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@router.message(UserForm.waiting_for_car_number)
async def process_car_number(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.
    """
    car_number = message.text.upper().replace(" ", "")
    
    try:
        # –£–±—Ä–∞–ª–∏ IGNORE, —á—Ç–æ–±—ã –æ—Ç–ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å
        await db.add_car(message.from_user.id, car_number)
    except Exception:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä `{car_number}`. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π `/mycars`.")
        await state.clear()
        return

    await message.answer(f"‚úÖ –ù–æ–º–µ—Ä `{car_number}` –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...")
    await state.clear()
    
    await check_and_notify_user(bot, message.from_user.id, car_number, is_initial_check=True)
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.", reply_markup=get_main_menu_keyboard())
# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# --- "–í—Å–µ—è–¥–Ω—ã–π" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---

@router.message()
async def handle_unknown_message(message: Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ä–∞–Ω–µ–µ.
    """
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. üòï\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å `/start` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")